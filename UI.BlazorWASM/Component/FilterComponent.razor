@inject IFilterProvider FilterProvider
@inject ISudokuProvider SudokuProvider

<div class="filter__cell
            filter__cell--@_currentClass"></div>

@code {
    private string _previousClass;
    private string _currentClass;

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    protected override void OnInitialized()
    {
        FilterProvider.OnChanged += Update;
        SudokuProvider.OnValueOrCandidatesChanged += Update;
    }

    private void Update()
    {
        _previousClass = _currentClass;
        _currentClass = FilterProvider.Filter.IsFiltered(SudokuProvider.Cells[X, Y]);

        if (_previousClass != _currentClass)
        {
            StateHasChanged();
        }
    }
}
