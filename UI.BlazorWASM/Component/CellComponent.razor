@inject ISudokuProvider SudokuProvider

<div class="input @(_currentIsGiven ? "input--is-given " : String.Empty)">
    @(_currentValue != 0 ? _currentValue.ToString() : string.Empty)
</div>

@code {
    private ICell _cell => SudokuProvider.Cells[X, Y];
    private int _previousValue;
    private int _currentValue => _cell.Input.Value;
    private bool _previousIsGiven;
    private bool _currentIsGiven => _cell.IsGiven;

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    protected override void OnInitialized()
    {
        SudokuProvider.OnValueChanged += StateHasChanged;
    }

    protected override bool ShouldRender()
    {
        return _previousValue != _currentValue || _previousIsGiven != _currentIsGiven;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        _previousIsGiven = _currentIsGiven;
        _previousValue = _currentValue;
    }
}
