@inject ISudokuProvider SudokuProvider

<div class="value input @_currentIsGiven">
    @_currentValue
</div>

@code {
    private string _previousValue;
    private string _currentValue;
    private string _previousIsGiven;
    private string _currentIsGiven;

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    protected override void OnInitialized()
    {
        SudokuProvider.OnValueChanged += Update;
    }

    private void Update()
    {
        var Cell = SudokuProvider.Cells[X, Y];

        _previousIsGiven = _currentIsGiven;
        _currentIsGiven = Cell.IsGiven ? "input--is-given " : String.Empty;

        _previousValue = _currentValue;
        _currentValue = Cell.Input.Value != 0 ? Cell.Input.Value.ToString() : string.Empty;

        if( _previousValue != _currentValue || _previousIsGiven != _currentIsGiven )
        { 
            StateHasChanged(); 
        }
    }

}
