@inject CommandProvider CommandProvider
@inject ShowMainMenuModalCommand ShowMainMenuModalCommand
@inject ShowShareModalCommand ShowShareModalCommand
@inject RestartGameCommand RestartGameCommand
@inject ShowHowToPlayModalCommand ShowHowToPlayModalCommand
@inject ShowHintModalCommand ShowHintModalCommand
@inject FindAllCandidatesCommand FindAllCandidatesCommand
@inject ClearCandidatesCommand ClearCandidatesCommand
@inject ILanguageContainerService Loc
@inject SettingsProvider SettingsProvider
@inject ModalProvider ModalProvider
@inject StartNewCustomSudokuCommand StartNewCustomSudokuCommand
@inject ShowPreviousModalCommand ShowPreviousModalCommand
@inject CloseModalCommand CloseModalCommand

<div class="menu">
    <div class="menu__item">
        @if( ModalProvider.CurrentState == ModalState.CustomSudoku )
        {
            <MenuLinkComponent OnMouseDown="StartNewCustomSudokuCommand">Start game</MenuLinkComponent>
        }
        else
        {
            <DropdownMenuComponent>
                <Header>
                    <MenuLabelComponent>@Loc.Keys["menu__menu-header"]</MenuLabelComponent>
                </Header>
                <Content>
                    <MenuLinkComponent OnMouseDown="ShowMainMenuModalCommand">@Loc.Keys["menu__main-menu"]</MenuLinkComponent>
                    <MenuLinkComponent OnMouseDown="ShowShareModalCommand">@Loc.Keys["menu__share"]</MenuLinkComponent>
                    <MenuLinkComponent OnMouseDown="RestartGameCommand">@Loc.Keys["menu__restart-game"]</MenuLinkComponent>
                    <MenuLinkComponent OnMouseDown="ShowHowToPlayModalCommand">@Loc.Keys["menu__how-to-play"]</MenuLinkComponent>
                    <MenuLinkComponent OnMouseDown="ShowHintModalCommand">@Loc.Keys["menu__show-hint"]</MenuLinkComponent>
                </Content>
            </DropdownMenuComponent>
        }
    </div>
    <div class="menu__item">
        <TooltipTogglerComponent />
    </div>
    <div class="menu__item">
        @if( ModalProvider.CurrentState == ModalState.CustomSudoku )
        {
            <MenuLinkComponent OnMouseDown="CloseModalCommand">Close</MenuLinkComponent>
        }
        else
        {
            <DropdownMenuComponent>
                <Header>
                    <MenuLabelComponent>@Loc.Keys["menu__candidates-header"]</MenuLabelComponent>
                </Header>
                <Content>
                    <MenuLinkComponent OnMouseDown="FindAllCandidatesCommand">@Loc.Keys["menu__find-all"]</MenuLinkComponent>
                    <MenuLinkComponent OnMouseDown="ClearCandidatesCommand">@Loc.Keys["menu__remove-all"]</MenuLinkComponent>
                </Content>
            </DropdownMenuComponent>
        }
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        SettingsProvider.OnChanged += StateHasChanged;
        ModalProvider.OnChanged += StateHasChanged;
        base.OnInitialized();
    }
}