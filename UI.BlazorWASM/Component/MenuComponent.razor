@inject IJSRuntime JSRuntime
@inject HodokuGridConverter HodokuGridConverter
@inject ISudokuProvider SudokuProvider
@inject CommandProvider CommandProvider
@inject IGameTimerProvider GameTimerProvider
@inject ModalProvider ModalProvider

<div class="menu">
    <div class="dropdown">
        <button class="dropbtn">New game</button>
        <div class="dropdown-content">
            <a @onclick="@(CommandProvider.StartNewGame("Easy").Execute)">Easy</a>
            <a @onclick="@(CommandProvider.StartNewGame("Medium").Execute)">Medium</a>
            <a @onclick="@(CommandProvider.StartNewGame("Hard").Execute)">Hard</a>
            <a @onclick="@(CommandProvider.StartNewGame("Unfair").Execute)">Unfair</a>
            <a @onclick="@(CommandProvider.StartNewGame("Extreme").Execute)">Extreme</a>
        </div>
    </div>
    <a @onclick="@(CommandProvider.Restart().Execute)">Restart</a>
    <a @onclick="@(() => ModalProvider.Hints?.Show())">Hint</a>

    <span>Timer: @GameTimerProvider.Elapsed.ToString("mm\\:ss")</span>

    <div class="menu-right">
        <a @onclick="@(CommandProvider.FindAllCandidates().Execute)">Find candidates</a>
    </div>
</div>

@code {
    [Parameter]
    public Func<string, Task> StartNewGame { get; set; }

    protected override void OnInitialized()
    {
        GameTimerProvider.OnChanged += StateHasChanged;
    }

}