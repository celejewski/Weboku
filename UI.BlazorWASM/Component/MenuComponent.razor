@inject IJSRuntime JSRuntime
@inject HodokuGridConverter HodokuGridConverter
@inject ISudokuProvider SudokuProvider
@inject CommandProvider CommandProvider
@inject IGameTimerProvider GameTimerProvider
@inject ModalProvider ModalProvider

<div class="menu">
    <div class="menu__item">
        <DropdownMenuComponent>
            <Header> 
                <span class="dropdown__item dropdown__label">Menu</span>
            </Header>
            <Content>
                <a class="dropdown__item menu__link" @onmousedown="NewGame">New game </a>
                <a class="dropdown__item menu__link" @onmousedown="RestartGame">Restart game</a>
                <a class="dropdown__item menu__link" @onmousedown="RestartGame">Restart game</a>
                <a class="dropdown__item menu__link" @onmousedown="RestartGame">Restart game</a>
            </Content>
        </DropdownMenuComponent>
    </div>
    <div class="menu__item">
    </div>
    <div class="menu__item">
        <DropdownMenuComponent>
            <Header>
                <span class="dropdown__item dropdown__label">Help</span>
            </Header>
            <Content>
                <a @onmousedown="@Find"
                   class="dropdown__item">Find candidates</a>
                <a @onmousedown="@ShowHowToPlay"
                   class="dropdown__item">How to play</a>
            </Content>
        </DropdownMenuComponent>
    </div>
</div>

@code {
    [Parameter]
    public Func<string, Task> StartNewGame { get; set; }

    private void NewGame()
    {
        ModalProvider.Modal.SetState(Modals.ModalState.NewGame);
    }

    private void RestartGame()
    {
        CommandProvider.Restart().Execute();
    }

    private void Find()
    {
        CommandProvider.FindAllCandidates().Execute();
    }

    private void ShowHowToPlay()
    {
        ModalProvider.Modal.SetState(Modals.ModalState.HowToPlay);
    }
}