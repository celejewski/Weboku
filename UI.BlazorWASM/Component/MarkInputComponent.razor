@inject IGridProvider GridProvider
@inject MarkInputProvider MarkInputProvider

<div class="mark__cell @GetCurrentClass()"></div>

@code {
    private bool _previousIsLegal;
    private bool _currentIsLegal => GridProvider.IsValueLegal(X, Y);

    private string GetCurrentClass()
    {
        if (!_currentIsLegal)
        {
            return " mark__cell--danger";
        }

        return UI.BlazorWASM.Converters.CellColorConverter.ToCssClass(MarkInputProvider.GetColor(X, Y));
    }

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    protected override void OnInitialized()
    {
        GridProvider.OnValueChanged += () =>
        {
            if( _previousIsLegal != _currentIsLegal )
            {
                StateHasChanged();
            }
        };
        MarkInputProvider.OnChanged += StateHasChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        _previousIsLegal = _currentIsLegal;
    }
}
