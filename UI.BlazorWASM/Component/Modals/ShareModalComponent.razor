@inject IJSRuntime JSRuntime
@inject CommandProvider CommandProvider
@inject ShareProvider ShareProvider  

<div class="share">
    <div class="share__numpad-area">
        <div class="share__container">
            <span class="share__label">What to share?</span>
            <div class="share__row">
                <div class="share__button @_onlyGivenClass"
                     @onclick="ShareProvider.SelectGivenOnly">Only givens</div>
                <div class="share__button @_givensAndUserInputsClass"
                     @onclick="ShareProvider.SelectGivenAndUserInput">Givens & user inputs</div>
            </div>
            <textarea id="share__output"
                      class="share__output">@ShareProvider.Converted</textarea>
            <div class="share__row">
                <div class="share__button"
                     @onclick=SelectOutput>Select</div>
                <div class="share__button"
                     @onclick="CommandProvider.CloseModal().Execute">Close</div>
            </div>
        </div>
    </div>
</div>

@code {
    private string _onlyGivenClass 
    { 
        get => ShareProvider.SharedFields == Enums.SharedFields.Givens ? _selectedClass : string.Empty; 
    }
    
    private string _givensAndUserInputsClass 
    { 
        get => ShareProvider.SharedFields == Enums.SharedFields.GivensAndInputs ? _selectedClass : string.Empty; 
    }
    private string _selectedClass { get => "share__button--selected"; }

    protected override void OnInitialized()
    {
        ShareProvider.OnChanged += Update;
    }

    private void Update()
    {
        StateHasChanged();
        SelectOutput();
    }

    private async Task SelectOutput()
    {
        await JSRuntime.InvokeVoidAsync("select", "share__output");
    }
}