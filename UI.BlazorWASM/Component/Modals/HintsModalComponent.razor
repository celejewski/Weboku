@inject HintsProvider HintsProvider
@inject CloseModalCommand CloseModalCommand
@inject UI.BlazorWASM.Hints.Displayer Displayer
@inject ILanguageContainerService LanguageContainer

<ModalWithGridTemplateComponent>
    <Content>
        <div class="hints-modal__container">
            <div class="hints-modal__title with-hr">@LanguageContainer.Keys["hints__header"]</div>
            <div class="hints-modal__technique-container">
                @if( HintsProvider.State != Enums.HintsState.ShowEmpty )
                {
                    <div class="hints-modal__technique-name">@Displayer.Title</div>
                }

                @if( HintsProvider.State == Enums.HintsState.ShowExplanation
                   || HintsProvider.State == Enums.HintsState.ShowNextStep )
                {
                    <p class="hints-modal__technique-desc">@Displayer.Description</p>
                }
            </div>
            <div class="hints-modal__menu">

                @if( HintsProvider.State == Enums.HintsState.ShowEmpty )
                {
                    <HintsButtonComponent Action="@ShowHint">@LanguageContainer.Keys["hints__show-hint"]</HintsButtonComponent>
                    <HintsButtonComponent Action="@ShowNextStep">@LanguageContainer.Keys["hints__show-next-step"]</HintsButtonComponent>
                }
                else if( HintsProvider.State == Enums.HintsState.ShowHint )
                {
                    <div></div>
                    <HintsButtonComponent Action="@ShowNextStep">@LanguageContainer.Keys["hints__show-next-step"]</HintsButtonComponent>
                }
                else if( HintsProvider.State == Enums.HintsState.ShowNextStep )
                {
                    if( HintsProvider.HasExplanation )
                    {
                        <HintsButtonComponent Action="@ShowExplanation">@LanguageContainer.Keys["hints__show-explanation"]</HintsButtonComponent>
                    }
                    else
                    {
                        <div></div>
                    }
                    <HintsButtonComponent Action="@Execute">@LanguageContainer.Keys["hints__execute"]</HintsButtonComponent>
                }
                else if( HintsProvider.State == Enums.HintsState.ShowExplanation )
                {
                    if( HintsProvider.HasPreviousExplanation )
                    {
                        <HintsButtonComponent Action="@ShowPreviousExplanation">@LanguageContainer.Keys["hints__show-previous-explanation"]</HintsButtonComponent>
                    }
                    else
                    {
                        <div></div>
                    }

                    if( HintsProvider.HasNextExplanation )
                    {
                        <HintsButtonComponent Action="@ShowNextExplanation">@LanguageContainer.Keys["hints__show-next-explanation"]</HintsButtonComponent>
                    }
                    else
                    {
                        <HintsButtonComponent Action="@Execute">@LanguageContainer.Keys["hints__execute"]</HintsButtonComponent>

                    }
                }
                <HintsButtonComponent Action="@Close">@LanguageContainer.Keys["modal__close"]</HintsButtonComponent>
            </div>
        </div>
    </Content>
</ModalWithGridTemplateComponent>

@code {
    private void ShowHint()
    {
        HintsProvider.ShowHint();
    }

    private void ShowNextStep()
    {
        HintsProvider.ShowNextStep();
    }

    private void ShowExplanation()
    {
        HintsProvider.ShowExplanation();
    }

    private void ShowPreviousExplanation()
    {
        HintsProvider.ShowPreviousExplanation();
    }

    private void ShowNextExplanation()
    {
        HintsProvider.ShowNextExplanation();
    }

    private void Execute()
    {
        HintsProvider.Execute();
    }

    private void Close()
    {
        HintsProvider.Close();
        CloseModalCommand.Execute();
    }

    protected override void OnInitialized()
    {
        HintsProvider.OnChanged += StateHasChanged;
    }
}
