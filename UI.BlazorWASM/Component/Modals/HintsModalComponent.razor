@inject HintsProvider HintsProvider
@inject CloseModalCommand CloseModalCommand
@inject UI.BlazorWASM.Hints.Displayer Displayer

<ModalWithGridTemplateComponent>
    <Content>
        <div class="hints-modal__container">
            <div class="hints-modal__title with-hr">Hints</div>
            <div class="hints-modal__technique-container">
                @if( Displayer.IsVisible )
                {
                    <div class="hints-modal__technique-name">@Displayer.Title</div>
                    <p class="hints-modal__technique-desc">@Displayer.Desccription</p>
                }
            </div>
            <div class="hints-modal__menu">
                <div class="hints-modal__button"
                     @onclick="@(() => HintsProvider.Display())">Reveal hint</div>
                @if( Displayer.IsVisible)
                {
                    <div class="hints-modal__button"
                         @onclick="@(() => HintsProvider.Execute())">Execute</div>
                }
                else
                {
                    <div></div>
                }
                <div class="hints-modal__button"
                     @onclick="Close">Close</div>
            </div>
        </div>
    </Content>
</ModalWithGridTemplateComponent>

@code {
    private void Close()
    {
        Displayer.Hide();
        CloseModalCommand.Execute();
    }

    //protected override void OnInitialized()
    //{
    //    HintsProvider.OnChanged += StateHasChanged;
    //}
}
