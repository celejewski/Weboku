@page "/"
@page "/paste/{SharedSudoku}"
@inject IJSRuntime JSRuntime
@inject ModalProvider ModalProvider

@inject Core.DomainFacade DomainFacade
@using UI.BlazorWASM.Component.Modals;

<div id="wrapper"
     class="wrapper">
    <div id="main"
         class="main"
         @oncontextmenu:preventDefault="true">

        <ModalComponent />
        <div class="main__grid">
            <BackgroundLayerComponent />
            @if( _afterSecondRender )
                {
                    <FilterLayerComponent />
                    @*<HintsHighlightLayerComponent />*@
                    <CellColorLayerComponent />
                    <MarkInputLayerComponent />
                }
                @if( _afterFirstRender )
                {
                    <InputLayerComponent />
                    <CandidatesLayerComponent />
                }
            <BorderLayerComponent />
            <ShadowLayerComponent />
            @if( _afterSecondRender )
            {
                <ClickableLayerComponent />
            }
        </div>
        <div class="main__game-info">
            <GameInfoComponent />
            <TooltipComponent />
        </div>
        <div class="main__numpad">
            <NumpadMenuComponent />
        </div>
        <div class="main__menu">
            <MenuComponent />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string SharedSudoku { get; set; }

    private bool _afterFirstRender = false;
    private bool _afterSecondRender = false;

    protected override async Task OnInitializedAsync()
    {
        DomainFacade.StartNewGame(".6.8912.78..4........6.....2.65..1....1...3....4..75.2.....9........5..93.2716.5.");
        DomainFacade.FillAllLegalCandidates();
        //GameStateChecker.OnSolved += OnGameEnd;
        //_ = Task.Run(() => SudokuProvider.Generate("medium"));

        //if( !string.IsNullOrEmpty(SharedSudoku) )
        //{
        //    PasteProvider.Pasted = SharedSudoku;
        //    ModalProvider.SetModalState(ModalState.Paste);
        //}
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if( _afterFirstRender && !_afterSecondRender )
        {
            _afterSecondRender = true; Task.Run(() =>
            {
                StateHasChanged();
            });
            Task.Run(async () =>
            {
                //await PreserveStateProvider.Load();
                //PreserveStateProvider.AutoSave(TimeSpan.FromSeconds(2));
                ModalProvider.SetModalState(ModalState.MainMenu);
            });
        }

        if( firstRender )
        {
            Task.Run(() =>
            {
                _afterFirstRender = true;
                StateHasChanged();
            });
        }

        await JSRuntime.InvokeVoidAsync("resize");
    }

    private void OnGameEnd()
    {
        //GameTimerProvider.Stop();
        //ModalProvider.SetModalState(ModalState.EndGame);
    }
}
