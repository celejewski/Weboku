@page "/"
@page "/paste/{SharedSudoku}"
@using Weboku.UserInterface.Providers
@using Weboku.UserInterface.Component.NumpadMenu
@using Weboku.Application
@using Weboku.Application.Enums
@inject IJSRuntime JSRuntime
@inject ModalProvider ModalProvider
@inject PreserveStateProvider PreserveStateProvider
@inject GameTimerProvider GameTimerProvider
@inject DomainFacade DomainFacade

<div id="wrapper"
     class="wrapper">
    <div id="main"
         class="main"
         @oncontextmenu:preventDefault="true">

        <ModalComponent/>
        <div class="main__grid">
            <BackgroundLayerComponent/>
            @if (_afterSecondRender)
            {
                <FilterLayerComponent/>
                <HintsHighlightLayerComponent/>
                <CellColorLayerComponent/>
            }
            @if (_afterFirstRender)
            {
                <ValueLayerComponent/>
                <CandidatesLayerComponent/>
            }
            <BorderLayerComponent/>
            <ShadowLayerComponent/>
            @if (_afterSecondRender)
            {
                <ClickableLayerComponent/>
            }
        </div>
        <div class="main__game-info">
            <GameInfoComponent/>
            <TooltipComponent/>
        </div>
        <div class="main__numpad">
            <NumpadMenuComponent/>
        </div>
        <div class="main__menu">
            <MenuComponent/>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string SharedSudoku { get; set; }

    private bool _afterFirstRender = false;
    private bool _afterSecondRender = false;

    protected override async Task OnInitializedAsync()
    {
        DomainFacade.OnSolved += OnGameEnd;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("resize");
        if (_afterFirstRender && !_afterSecondRender)
        {
            _afterSecondRender = true;
            await Task.Run(async () =>
            {
                PreserveStateProvider.Load();
                PreserveStateProvider.AutoSave(TimeSpan.FromSeconds(2));


                if (!string.IsNullOrEmpty(SharedSudoku))
                {
                    DomainFacade.Pasted = SharedSudoku;
                    ModalProvider.SetModalState(ModalState.Paste);
                }
                else
                {
                    ModalProvider.SetModalState(ModalState.MainMenu);
                }
                StateHasChanged();
            });
        }

        if (firstRender)
        {
            await Task.Run(() =>
            {
                _afterFirstRender = true;
                StateHasChanged();
            });
        }
    }

    private void OnGameEnd()
    {
        GameTimerProvider.Stop();
        if (ModalProvider.CurrentState == ModalState.None)
        {
            ModalProvider.SetModalState(ModalState.EndGame);
        }
    }

}