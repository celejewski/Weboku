@page "/"
@page "/paste/{SharedSudoku}"
@inject SudokuProvider SudokuProvider
@inject HotkeyProvider HotkeyProvider
@inject IJSRuntime JSRuntime
@inject CommandProvider CommandProvider
@inject GameStateChecker GameStateChecker
@inject GameTimerProvider GameTimerProvider
@inject ModalProvider ModalProvider
@inject PasteProvider PasteProvider
@using UI.BlazorWASM.Component.Modals;
@inject PreserveStateProvider PreserveStateProvider
@inject SettingsProvider SettingsProvider

<div id="wrapper"
     class="wrapper">
    <div id="main"
         class="main"
         @oncontextmenu:preventDefault="true">

        <ModalComponent />
        <div class="main__grid">
            <BackgroundLayerComponent />
            @if( _afterSecondRender )
            {
                <FilterLayerComponent />
                <HintsHighlightLayerComponent />
                <CellColorLayerComponent />
                <MarkInputLayerComponent />
            }
            @if( _afterFirstRender )
            {
                <InputLayerComponent />
                <CandidatesLayerComponent />
            }
            <BorderLayerComponent />
            <ShadowLayerComponent />
            @if( _afterSecondRender )
            {
                <ClickableLayerComponent />
            }
        </div>
        <div class="main__game-info">
            <GameInfoComponent />
            <TooltipComponent />
        </div>
        <div class="main__numpad">
            <NumpadMenuComponent />
        </div>
        <div class="main__menu">
            <MenuComponent />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string SharedSudoku { get; set; }

    private bool _afterFirstRender = false;
    private bool _afterSecondRender = false;

    protected override async Task OnInitializedAsync()
    {
        GameStateChecker.OnSolved += OnGameEnd;
        _ = Task.Run(() => SudokuProvider.Generate("medium"));

        if( !string.IsNullOrEmpty(SharedSudoku) )
        {
            PasteProvider.Pasted = SharedSudoku;
            ModalProvider.SetModalState(ModalState.Paste);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        @if( _afterFirstRender && !_afterSecondRender )
        {
            _afterSecondRender = true;
            Task.Run(() =>
            {
                StateHasChanged();
            });

            Task.Run(async () =>
            {
                await PreserveStateProvider.Load();
                PreserveStateProvider.AutoSave(TimeSpan.FromSeconds(2));
                ModalProvider.SetModalState(ModalState.MainMenu);
            });
        }
        @if( firstRender )
        {
            Task.Run(() => {
                _afterFirstRender = true;
                StateHasChanged();
            });
        }

        await JSRuntime.InvokeVoidAsync("resize");
    }

    private void OnGameEnd()
    {
        GameTimerProvider.Stop();
        ModalProvider.SetModalState(ModalState.EndGame);
    }
}
