@page "/"
@inject HttpClient Http
@inject IGridGenerator GridGenerator
@inject IGridHistoryManager GridHistoryManager

<div id="main"
     class="main"
     onblur="this.focus()"
     tabindex="0"
     @onkeypress="OnKeyDown"
     @oncontextmenu:preventDefault="true">

    <MenuComponent Grid="_grid"
                   StartNewGame="StartNewGame"
                   FillAllCandidates="FillAllCandidates" />

    <div class="layer-wrapper">
        <BackgroundLayerComponent />

        <FilterLayerComponent Cells="Cells"
                              Filter="Filter" />

        <ColorLayerComponent ColorClasses="ColorClasses" />

        <GridComponent Cells="Cells" />

        <ClickableLayerComponent ClickableAction="ClickableAction" />

    </div>

    <NumpadComponent @bind-SelectedValue="SelectedValue"
                     OnClickUndo="GridHistoryManager.Undo"
                     OnClickRedo="GridHistoryManager.Redo"
                     OnClickPairFilter="OnClickPairFilter"
                     OnClickSelectedValue="OnClickSelectedValue"
                     @bind-ClickableAction="ClickableAction"
                     StandardAction="StandardAction" 
                     @bind-Filter="Filter"/>
</div>

@code {
    private IGrid _grid;
    public int SelectedValue { get; set; }

    public ICell[,] Cells { get => _grid.Cells; }

    protected override void OnInitialized()
    {
        _grid = GridGenerator.Empty();
        GridHistoryManager.AttachTo(_grid);
        Filter = new SelectedValueFilter(1);
        StandardAction = new StandardAction(ColorClasses, Cells, GridHistoryManager, _grid, StateHasChanged);
        ClickableAction = StandardAction;
    }

    public IClickableAction ClickableAction { get; set; }
    public StandardAction StandardAction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StartNewGame("Medium");
    }

    public void OnKeyDown(KeyboardEventArgs args)
    {
        if( int.TryParse(args.Key, out var digit) )
        {
            SelectedValue = digit;
        }

        if( args.Key == "z" )
        {
            GridHistoryManager.Undo();
        }

        if( args.Key == "y" )
        {
            GridHistoryManager.Redo();
        }

        if (args.Key == "r")
        {
            ClearColors();
        }
    }

    private void ClearColors()
    {
        for( int y = 0; y < 9; y++ )
        {
            for( int x = 0; x < 9; x++ )
            {
                ColorClasses[x, y] = string.Empty;
            }
        }
    }

    private void FillAllCandidates()
    {
        GridHistoryManager.Save();
        _grid.FillAllCandidates();
    }

    private async Task StartNewGame(string difficulty)
    {
        GridHistoryManager.Save();
        var newGrid = await GridGenerator.WithGiven(difficulty);
        _grid.AssignFrom(newGrid);
        SelectedValue = 1;
        StateHasChanged();
    }



    public IFilter Filter { get; set; }
    private void OnClickPairFilter()
    {
        Filter = new PairFilter();
    }

    private void OnClickSelectedValue()
    {
        Filter = new SelectedValueFilter(SelectedValue);
    }

    private string[,] ColorClasses { get; set; } = new string[9, 9];
}
