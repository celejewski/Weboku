@page "/"
@inject HttpClient Http
@inject IGridGenerator GridGenerator
@inject IJSRuntime JSRuntime

<div id="main"
     class="main"
     onblur="this.focus()"
     tabindex="0"
     @onkeypress="OnKeyDown">
    
    <MenuComponent StartNewGame="StartNewGame"
                   FillAllCandidates="FillAllCandidates"
                   Copy="Copy"/>

    <GridComponent SelectedValue="SelectedValue"
                   OnCellLeftClick="OnCellLeftClick"
                   OnCellRightClick="OnCellRightClick"
                   Cells="Cells"/>
    
    <NumpadComponent @bind-SelectedValue="SelectedValue"
                     OnClickUndo="OnClickUndo"
                     OnClickRedo="OnClickRedo" />
</div>

@code {
    private Grid _grid;
    public int SelectedValue { get; set; }

    public ICell[,] Cells { get => _grid.Cells; }

    protected override void OnInitialized()
    {
        _grid = new Grid();
    }

    protected override async Task OnInitializedAsync()
    {
        await StartNewGame("Medium");
    }

    private async Task StartNewGame(string difficulty)
    {
        var newGrid = await GridGenerator.New(difficulty);
        _grid.RecordState();
        _grid.AssignFrom(newGrid);
        SelectedValue = 1;
        StateHasChanged();
    }

    private void FillAllCandidates()
    {
        _grid.RecordState();
        _grid.FillAllCandidates();
    }

    public void OnCellLeftClick(ICell cell)
    {
        if( cell.IsGiven )
        {
            return;
        }

        if( SelectedValue == 0 || cell.Input.Value == 0 )
        {
            _grid.RecordState();
            _grid.SetValue(cell.Col, cell.Row, SelectedValue);
            StateHasChanged();
        }
        else if( cell.Input.Value == SelectedValue )
        {
            _grid.RecordState();
            _grid.SetValue(cell.Col, cell.Row, 0);
            StateHasChanged();
        }
    }

    public void OnCellRightClick(ICell cell)
    {
        if( cell.Input.Value != 0 || SelectedValue == 0 )
        {
            return;
        }

        _grid.RecordState();
        _grid.ToggleCandidate(cell.Col, cell.Row, SelectedValue);
    }

    public void OnKeyDown(KeyboardEventArgs args)
    {
        if( int.TryParse(args.Key, out var digit) )
        {
            SelectedValue = digit;
        }

        if( args.Key == "z" )
        {
            _grid.Undo();
        }

        if( args.Key == "y" )
        {
            _grid.Redo();
        }
    }

    private void OnClickUndo()
    {
        _grid.Undo();
    }

    private void OnClickRedo()
    {
        _grid.Redo();
    }

    public string KeyPressed { get; set; }

    private async Task Copy()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _grid.ToString());
    }
}