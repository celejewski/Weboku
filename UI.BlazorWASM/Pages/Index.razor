@page "/"
@inject HttpClient Http
@inject IGridGenerator GridGenerator
@inject ICellColorProvider CellColorProvider
@inject ISudokuProvider SudokuProvider
@inject IGridHistoryManager GridHistoryManager
@inject IFilterProvider FilterProvider
@inject NumpadMenuItemBuilderProvider NumpadMenuItemBuilderProvider
@inject IClickableActionProvider ClickableActionProvider
@inject NumpadMenuBuilder NumpadMenuBuilder

<div id="main"
     class="main"
     onblur="this.focus()"
     tabindex="0"
     @oncontextmenu:preventDefault="true">

    <MenuComponent StartNewGame="StartNewGame"
                   FillAllCandidates="FillAllCandidates" />

    <div class="layer-wrapper">
        <div class="layer grid-3x3 background-layer">
            @for( int i = 0; i < 9; i++ )
            {
                <div></div>
            }
        </div>

        <Grid9x9Component>
            <div class="@FilterProvider.Filter.IsFiltered(SudokuProvider.Cells[context.x, context.y])"></div>
        </Grid9x9Component>

        <Grid9x9Component>
            <div class="cell-color @CellColorProvider.GetCssClass(context.x, context.y)"></div>
        </Grid9x9Component>

        <Grid9x9x9Component>
            @{
                ICell cell = SudokuProvider.Cells[context.x, context.y];
                int value = context.z + 1;
                string illegalClass = (cell.Candidates.ContainsKey(value) && !cell.Candidates[value].IsLegal) ? "mark mark-danger" : "";
                <div class="@illegalClass"></div>
            }
        </Grid9x9x9Component>

        <Grid9x9Component>
            @{
                ICell cell = SudokuProvider.Cells[context.x, context.y];
                string illegalClass = !cell.Input.IsLegal ? "mark mark-danger" : "";
                <div class="@illegalClass"></div>
            }
        </Grid9x9Component>

        <Grid9x9Component>
            <CellComponent Cell="SudokuProvider.Cells[context.x, context.y]" />
        </Grid9x9Component>

        <Grid9x9x9Component>
            @{
                ICell cell = SudokuProvider.Cells[context.x, context.y];
                int value = context.z + 1;
                <div class="value">
                    @(cell.Candidates.ContainsKey(value) ? value.ToString() : "")
                </div>
            }
        </Grid9x9x9Component>
        <Grid9x9Component>
            <div class="clickable"
                 @onclick="(e) => ClickableActionProvider.ClickableAction.LeftClickAction(e, context.x, context.y)"
                 @oncontextmenu="(e) => ClickableActionProvider.ClickableAction.RightClickAction(e, context.x, context.y)">
            </div>
        </Grid9x9Component>

    </div>

    <NumpadMenuComponent NumpadMenuItems="MenuItems"
                         OnNumpadMenuClicked="() => StateHasChanged()" />
</div>

@code {
    public INumpadMenuItem[] MenuItems { get; set; }

    protected override void OnInitialized()
    {
        InitMenuItems();
        CellColorProvider.OnChanged += StateHasChanged;
        SudokuProvider.OnChanged += StateHasChanged;
        ClickableActionProvider.OnChanged += StateHasChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await StartNewGame("Medium");
    }

    private void FillAllCandidates()
    {
        GridHistoryManager.Save();
        SudokuProvider.FillAllCandidates();
    }

    private async Task StartNewGame(string difficulty)
    {
        GridHistoryManager.Save();
        var newGrid = await GridGenerator.WithGiven(difficulty);
        SudokuProvider.AssignFrom(newGrid);
    }

    public void InitMenuItems()
    {
        MenuItems = new INumpadMenuItem[]
        {
            NumpadMenuBuilder.Undo(),
            NumpadMenuBuilder.SelectValue(1),
            NumpadMenuBuilder.SelectValue(2),
            NumpadMenuBuilder.SelectValue(3),

            NumpadMenuBuilder.Redo(),
            NumpadMenuBuilder.SelectValue(4),
            NumpadMenuBuilder.SelectValue(5),
            NumpadMenuBuilder.SelectValue(6),

            NumpadMenuBuilder.SelectValue(0),
            NumpadMenuBuilder.SelectValue(7),
            NumpadMenuBuilder.SelectValue(8),
            NumpadMenuBuilder.SelectValue(9),

            NumpadMenuBuilder.Pairs(),
            };
    }
    //public void InitMenuItems()
    //{
    //    Func<int, INumpadMenuItem> selectedValue = (digit) => NumpadMenuItemBuilderProvider.New()
    //            .SetLabel(digit.ToString())
    //            .WithChangeAction(new StandardAction(GridHistoryManager, CellColorProvider, SudokuProvider, digit ))
    //            .WithChangeFilter(new SelectedValueFilter(digit))
    //            .Build();

    //    var redo = NumpadMenuItemBuilderProvider.New()
    //        .SetLabel("Redo")
    //        .WithExecute(() => GridHistoryManager.Redo())
    //        .WithCanExecute(() => GridHistoryManager.CanRedo)
    //        .SetIsSelectable(false)
    //        .Build();

    //    var undo = NumpadMenuItemBuilderProvider.New()
    //        .SetLabel("Undo")
    //        .WithExecute(() => GridHistoryManager.Undo())
    //        .WithCanExecute(() => GridHistoryManager.CanUndo)
    //        .SetIsSelectable(false)
    //        .Build();

    //    var pairs = NumpadMenuItemBuilderProvider.New()
    //        .SetLabel("Pairs")
    //        .WithChangeFilter(new PairFilter())
    //        .Build();

    //    MenuItems = new INumpadMenuItem[]
    //    {
    //        undo,
    //        selectedValue(1),
    //        selectedValue(2),
    //        selectedValue(3),

    //        redo,
    //        selectedValue(4),
    //        selectedValue(5),
    //        selectedValue(6),

    //        selectedValue(0),
    //        selectedValue(7),
    //        selectedValue(8),
    //        selectedValue(9),

    //        pairs
    //     };
    //}
}