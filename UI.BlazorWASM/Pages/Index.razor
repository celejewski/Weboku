@page "/"
@page "/paste/{SharedSudoku}"
@inject IGridGenerator GridGenerator
@inject HotkeyProvider HotkeyProvider
@inject IJSRuntime JSRuntime
@inject CommandProvider CommandProvider
@inject GameStateChecker GameStateChecker
@inject GameTimerProvider GameTimerProvider
@inject ModalProvider ModalProvider
@inject PasteProvider PasteProvider
@using UI.BlazorWASM.Component.Modals;

<div id="wrapper"
     class="wrapper">
    <div id="main"
         class="main"
         @oncontextmenu:preventDefault="true">

        <ModalComponent />

        <div class="main__grid">
            <BackgroundLayerComponent />
            <FilterLayerComponent />
            <HintsHighlightLayerComponent />
            <CellColorLayerComponent />
            <MarkCandidatesLayerComponent />
            <MarkInputLayerComponent />
            <InputLayerComponent />
            <CandidatesLayerComponent />
            <BorderLayerComponent />
            <ShadowLayerComponent />
            <ClickableLayerComponent />
        </div>
        <div class="main__game-info">
            <GameInfoComponent />
        </div>
        <div class="main__numpad">
            <NumpadMenuComponent />
        </div>
        <div class="main__menu">
            <MenuComponent />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string SharedSudoku { get; set; }

    protected override void OnInitialized()
    {
        GameStateChecker.OnSolved += OnGameEnd;
        Task.Run(() => GridGenerator.WithGiven("medium"));

        if( !string.IsNullOrEmpty(SharedSudoku) )
        {
            PasteProvider.Pasted = SharedSudoku;
            ModalProvider.SetModalState(ModalState.Paste);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("resize");
    }

    private void OnGameEnd()
    {
        GameTimerProvider.Stop();
        ModalProvider.SetModalState(ModalState.EndGame);
    }
}
