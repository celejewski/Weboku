@page "/"
@inject IGridGenerator GridGenerator
@inject HotkeyProvider HotkeyProvider
@inject IJSRuntime JSRuntime
@inject CommandProvider CommandProvider
@inject IGameStateChecker GameStateChecker
@inject IGameTimerProvider GameTimerProvider
@inject ModalProvider ModalProvider
@using UI.BlazorWASM.Component.Modals; 


<ModalComponent @ref="_modal"/>

<div id="wrapper" 
     class="wrapper">
    <div id="main"
         class="main"
         onblur="this.focus()"
         @onkeydown="HotkeyProvider.OnKeyDown"
         tabindex="0"
         @oncontextmenu:preventDefault="true">

        <div class="main__menu">
            <MenuComponent />
        </div>

        <div class="main__grid">
            @*<BackgroundLayerComponent />*@

            @*<FilterLayerComponent />

                <CellColorLayerComponent />

                <MarkCandidatesLayerComponent />

                <MarkInputLayerComponent />*@

            @*<InputLayerComponent />*@

            <CandidatesLayerComponent />

            @*<BorderLayerComponent />*@

            @*<ClickableLayerComponent />*@

        </div>

        <div class="main__numpad">
            <NumpadMenuComponent />
        </div>
    </div>
</div>

@code {
    private ModalComponent _modal;

    private async Task StartNewGame(string difficulty)
    {
        await CommandProvider.StartNewGame(difficulty).Execute();
    }

    protected override async Task OnInitializedAsync()
    {
        GameStateChecker.OnSolved += OnGameEnd;
        await GridGenerator.WithGiven("medium");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if( !firstRender )
        {
            await JSRuntime.InvokeVoidAsync("focusMain");
            await JSRuntime.InvokeVoidAsync("resize");
        }
        else
        {
            ModalProvider.Modal = _modal;
            _modal.SetState(ModalState.None);
        }
    }

    private void OnGameEnd()
    {
        GameTimerProvider.Stop();
        _modal.SetState(ModalState.EndGame);
        StateHasChanged();
    }

    private void PlayAgain()
    {
        _modal.SetState(ModalState.NewGame);
        StateHasChanged();
    }
}
