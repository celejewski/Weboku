@page "/"
@inject HttpClient Http
@inject IGridGenerator GridGenerator
@inject IGridHistoryManager GridHistoryManager

<div id="main"
     class="main"
     onblur="this.focus()"
     tabindex="0"
     @oncontextmenu:preventDefault="true">

    <MenuComponent Grid="_grid"
                   StartNewGame="StartNewGame"
                   FillAllCandidates="FillAllCandidates" />

    <div class="layer-wrapper">
        <div class="layer grid-3x3 background-layer">
            @for( int i = 0; i < 9; i++ )
            {
                <div></div>
            }
        </div>

        <Grid9x9Component>
            <div class="@Filter.IsFiltered(Cells[context.x, context.y])"></div>
        </Grid9x9Component>

        <Grid9x9Component>
            <div class="color-cell @ColorClasses[context.x, context.y]"></div>
        </Grid9x9Component>

        <Grid9x9Component>
            <CellComponent Cell="Cells[context.x, context.y]" />
        </Grid9x9Component>

        <Grid9x9Component>
            <div class="clickable"
                 @onclick="(e) => ClickableAction.LeftClickAction(e, context.x, context.y)"
                 @oncontextmenu="(e) => ClickableAction.RightClickAction(e, context.x, context.y)">
            </div>
        </Grid9x9Component>

    </div>

    <NumpadMenuComponent NumpadMenuItems="_menuItems" 
                         OnNumpadMenuClicked="() => StateHasChanged()"/>
</div>

@code {
    private IGrid _grid;
    public int SelectedValue { get; set; }
    public ICell[,] Cells { get => _grid.Cells; }
    public IFilter Filter { get; set; }
    private string[,] ColorClasses { get; set; } = new string[9, 9];
    public IClickableAction ClickableAction { get; set; }
    public StandardAction StandardAction { get; set; }
    private NumpadMenuItem[] _menuItems { get; set; }


    protected override void OnInitialized()
    {
        _grid = GridGenerator.Empty();
        GridHistoryManager.AttachTo(_grid);
        Filter = new SelectedValueFilter(1);
        StandardAction = new StandardAction(ColorClasses, Cells, GridHistoryManager, _grid, StateHasChanged);
        ClickableAction = StandardAction;
        InitMenuItems();
    }
    protected override async Task OnInitializedAsync()
    {
        await StartNewGame("Medium");
    }

    private void ClearColors()
    {
        for( int y = 0; y < 9; y++ )
        {
            for( int x = 0; x < 9; x++ )
            {
                ColorClasses[x, y] = string.Empty;
            }
        }
    }

    private void FillAllCandidates()
    {
        GridHistoryManager.Save();
        _grid.FillAllCandidates();
    }

    private async Task StartNewGame(string difficulty)
    {
        GridHistoryManager.Save();
        var newGrid = await GridGenerator.WithGiven(difficulty);
        _grid.AssignFrom(newGrid);
        StateHasChanged();
    }

    public void InitMenuItems()
    {
        Func<int, NumpadMenuItem> selectedValue = (digit) => new NumpadMenuItem()
                .SetLabel(digit.ToString())
                .WithChangeAction((action) => this.ClickableAction = action, StandardAction)
                .WithChangeFilter((filter) => this.Filter = filter, new SelectedValueFilter(digit))
                .WithExecute(() => StandardAction.SelectedValue = digit);

        var redo = new NumpadMenuItem()
            .SetLabel("Redo")
            .WithExecute(() => GridHistoryManager.Redo())
            .WithCanExecute(() => GridHistoryManager.CanRedo)
            .SetIsSelectable(false);

        var undo = new NumpadMenuItem()
            .SetLabel("Undo")
            .WithExecute(() => GridHistoryManager.Undo())
            .WithCanExecute(() => GridHistoryManager.CanUndo)
            .SetIsSelectable(false);

        var pairs = new NumpadMenuItem()
            .SetLabel("Pairs")
            .WithChangeFilter((filter) => this.Filter = filter, new PairFilter());

        _menuItems = new NumpadMenuItem[]
        {
            undo,
            selectedValue(1),
            selectedValue(2),
            selectedValue(3),

            redo,
            selectedValue(4),
            selectedValue(5),
            selectedValue(6),

            selectedValue(0).SetLabel("x"),
            selectedValue(7),
            selectedValue(8),
            selectedValue(9),

            pairs
        };
    }
}
