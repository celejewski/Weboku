@page "/"
@inject HttpClient Http
@inject IGridGenerator GridGenerator
@inject ICellColorProvider CellColorProvider
@inject ISudokuProvider SudokuProvider
@inject IGridHistoryManager GridHistoryManager
@inject IFilterProvider FilterProvider
@inject IClickableActionProvider ClickableActionProvider
@inject HotkeyProvider HotkeyProvider
@inject IJSRuntime JSRuntime
@inject CommandProvider CommandProvider
@inject IGameStateChecker GameStateChecker
@inject IGameTimerProvider GameTimerProvider
@inject ModalProvider ModalProvider
@using UI.BlazorWASM.Component.Modals; 


<ModalComponent @ref="_modal"/>

<div id="main"
     class="container main"
     onblur="this.focus()"
     @onkeydown="HotkeyProvider.OnKeyDown"
     tabindex="0"
     @oncontextmenu:preventDefault="true">
    <MenuComponent />

    <div class="layer-wrapper">
        <BackgroundLayerComponent />

        <FilterLayerComponent />

        <CellColorLayerComponent />

        <MarkCandidatesLayerComponent />

        <MarkInputLayerComponent />

        <InputLayerComponent />

        <CandidatesLayerComponent />

        <BorderLayerComponent />

        <ClickableLayerComponent />

    </div>

    <NumpadMenuComponent />
</div>

@code {
    private ModalComponent _modal;

    private async Task StartNewGame(string difficulty)
    {
        await CommandProvider.StartNewGame(difficulty).Execute();
    }

    protected override async Task OnInitializedAsync()
    {
        GameStateChecker.OnSolved += OnGameEnd;
        await GridGenerator.WithGiven("medium");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if( !firstRender )
        {
            await JSRuntime.InvokeVoidAsync("focusMain");
        }
        else
        {
            ModalProvider.Modal = _modal;
            _modal.SetState(ModalState.NewGame);
        }
    }

    private void OnGameEnd()
    {
        GameTimerProvider.Stop();
        _modal.SetState(ModalState.EndGame);
        StateHasChanged();
    }

    private void PlayAgain()
    {
        _modal.SetState(ModalState.NewGame);
        StateHasChanged();
    }
}
