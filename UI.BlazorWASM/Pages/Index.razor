@page "/"
@inject HttpClient Http
@inject IGridGenerator GridGenerator
@inject ICellColorProvider CellColorProvider
@inject ISudokuProvider SudokuProvider
@inject IGridHistoryManager GridHistoryManager

<div id="main"
     class="main"
     onblur="this.focus()"
     tabindex="0"
     @oncontextmenu:preventDefault="true">

    <MenuComponent StartNewGame="StartNewGame"
                   FillAllCandidates="FillAllCandidates" />

    <div class="layer-wrapper">
        <div class="layer grid-3x3 background-layer">
            @for( int i = 0; i < 9; i++ )
            {
                <div></div>
            }
        </div>

        <Grid9x9Component>
            <div class="@Filter.IsFiltered(SudokuProvider.Cells[context.x, context.y])"></div>
        </Grid9x9Component>

        <Grid9x9Component>
            <div class="cell-color @CellColorProvider.GetCssClass(context.x, context.y)"></div>
        </Grid9x9Component>

        <Grid9x9x9Component>
            @{
                ICell cell = SudokuProvider.Cells[context.x, context.y];
                int value = context.z + 1;
                string illegalClass = (cell.Candidates.ContainsKey(value) && !cell.Candidates[value].IsLegal) ? "mark mark-danger" : "";
                <div class="@illegalClass"></div>
            }
        </Grid9x9x9Component>

        <Grid9x9Component>
            @{
                ICell cell = SudokuProvider.Cells[context.x, context.y];
                string illegalClass = !cell.Input.IsLegal ? "mark mark-danger" : "";
                <div class="@illegalClass"></div>
            }
        </Grid9x9Component>

        <Grid9x9Component>
            <CellComponent Cell="SudokuProvider.Cells[context.x, context.y]" />
        </Grid9x9Component>

        <Grid9x9x9Component>
            @{
                ICell cell = SudokuProvider.Cells[context.x, context.y];
                int value = context.z + 1;
                <div class="value">
                    @(cell.Candidates.ContainsKey(value) ? value.ToString() : "")
                </div>
            }
        </Grid9x9x9Component>
        <Grid9x9Component>
            <div class="clickable"
                 @onclick="(e) => ClickableAction.LeftClickAction(e, context.x, context.y)"
                 @oncontextmenu="(e) => ClickableAction.RightClickAction(e, context.x, context.y)">
            </div>
        </Grid9x9Component>

    </div>

    <NumpadMenuComponent NumpadMenuItems="MenuItems"
                         OnNumpadMenuClicked="() => StateHasChanged()" />
</div>

@code {
    public IClickableAction ClickableAction { get; set; }
    public IFilter Filter { get; set; } = new SelectedValueFilter(1);
    public INumpadMenuItem[] MenuItems { get; set; }

    protected override void OnInitialized()
    {
        ClickableAction = new StandardAction(GridHistoryManager, CellColorProvider, SudokuProvider, 1 );
        InitMenuItems();
        CellColorProvider.OnChanged += StateHasChanged;
        SudokuProvider.OnChanged += StateHasChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await StartNewGame("Medium");
    }

    private void FillAllCandidates()
    {
        GridHistoryManager.Save();
        SudokuProvider.FillAllCandidates();
    }

    private async Task StartNewGame(string difficulty)
    {
        GridHistoryManager.Save();
        var newGrid = await GridGenerator.WithGiven(difficulty);
        SudokuProvider.AssignFrom(newGrid);
    }

    public void InitMenuItems()
    {
        Func<int, NumpadMenuItem> selectedValue = (digit) => new NumpadMenuItem()
                .SetLabel(digit.ToString())
                .WithChangeAction((action) => this.ClickableAction = action, new StandardAction(GridHistoryManager, CellColorProvider, SudokuProvider, digit ))
                .WithChangeFilter((filter) => Filter = filter, new SelectedValueFilter(digit));

        var redo = new NumpadMenuItem()
            .SetLabel("Redo")
            .WithExecute(() => GridHistoryManager.Redo())
            .WithCanExecute(() => GridHistoryManager.CanRedo)
            .SetIsSelectable(false);

        var undo = new NumpadMenuItem()
            .SetLabel("Undo")
            .WithExecute(() => GridHistoryManager.Undo())
            .WithCanExecute(() => GridHistoryManager.CanUndo)
            .SetIsSelectable(false);

        var pairs = new NumpadMenuItem()
            .SetLabel("Pairs")
            .WithChangeFilter((filter) => Filter = filter, new PairFilter());

        MenuItems = new NumpadMenuItem[]
        {
            undo,
            selectedValue(1),
            selectedValue(2),
            selectedValue(3),

            redo,
            selectedValue(4),
            selectedValue(5),
            selectedValue(6),

            selectedValue(0).SetLabel("x"),
            selectedValue(7),
            selectedValue(8),
            selectedValue(9),

            pairs
         };
    }
}