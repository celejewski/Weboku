@page "/"

<div id="main"
        class="main"
        onblur="this.focus()"
        tabindex="0"
        @onkeypress="OnKeyDown">
    <div class="menu">
        Menu
    </div>
    <div class="grid">
        @for( int y = 0; y < 9; y++ )
        {
                @for( int x = 0; x < 9; x++ )
                {
                    var cell = Cells[x, y];
                    <CellComponent @bind-Cell="cell"
                                    @bind-SelectedValue="SelectedValue"
                                    OnClickCallback=" () => OnLeftCellClick(cell)"
                                    OnRightClickCallback="() => OnCellRightClick(cell)">
                    </CellComponent>
                }
        }
    </div>


    <div class="numpad">
        <button @onclick="OnClickUndo">⎌</button>
        <NumpadComponent Value="1" @bind-SelectedValue="SelectedValue" />
        <NumpadComponent Value="2" @bind-SelectedValue="SelectedValue" />
        <NumpadComponent Value="3" @bind-SelectedValue="SelectedValue" />

        <button @onclick="OnClickRedo">⇨</button>
        <NumpadComponent Value="4" @bind-SelectedValue="SelectedValue" />
        <NumpadComponent Value="5" @bind-SelectedValue="SelectedValue" />
        <NumpadComponent Value="6" @bind-SelectedValue="SelectedValue" />

        <NumpadComponent Value="0" @bind-SelectedValue="SelectedValue" />
        <NumpadComponent Value="7" @bind-SelectedValue="SelectedValue" />
        <NumpadComponent Value="8" @bind-SelectedValue="SelectedValue" />
        <NumpadComponent Value="9" @bind-SelectedValue="SelectedValue" />
    </div>

</div>

@code {
    private Grid _grid;
    public int SelectedValue { get; set; }

    public ICell[,] Cells { get => _grid.Cells; }

    protected override void OnInitialized()
    {
        _grid = new Grid("..28..3..8.......5.9.53...8.489.........4.........397.1...97.4.7.......3..5..81.."
            .Replace('.', '0'));

        _grid = new Grid();

        _grid.FillAllCandidates();
    }

    public void OnLeftCellClick(ICell cell)
    {
        if( cell.IsGiven )
        {
            return;
        }

        if( SelectedValue == 0 || cell.Input.Value == 0 )
        {
            _grid.RecordState();
            _grid.SetValue(cell.Col, cell.Row, SelectedValue);
            StateHasChanged();
        }
        else if( cell.Input.Value == SelectedValue )
        {
            _grid.RecordState();
            _grid.SetValue(cell.Col, cell.Row, 0);
            StateHasChanged();
        }
    }

    public void OnCellRightClick(ICell cell)
    {
        if( cell.Input.Value != 0 || SelectedValue == 0 )
        {
            return;
        }

        _grid.RecordState();
        _grid.ToggleCandidate(cell.Col, cell.Row, SelectedValue);
    }

    public void OnKeyDown(KeyboardEventArgs args)
    {
        if( int.TryParse(args.Key, out var digit) )
        {
            SelectedValue = digit;
        }

        if( args.Key == "z" )
        {
            _grid.Undo();
        }

        if( args.Key == "y" )
        {
            _grid.Redo();
        }
    }

    private void OnClickUndo()
    {
        _grid.Undo();
    }

    private void OnClickRedo()
    {
        _grid.Redo();
    }

    public string KeyPressed { get; set; }
}