@if( Cell.Input.Value != 0 )
{
    <div class="cell input @BackgroundClass @InputIsHighlightedClass @GivenClass"
         style="@Border"
         @onclick="OnClick">
        @Cell.Input.Value
    </div>
}
else
{
    <div class="cell candidates @BackgroundClass @CandidateIsHighlightedClass"
         style="@Border"
         @onclick="OnClick">
        @for( int value = 1; value < 10; value++ )
        {
            <div class="candidate">
                @if( Cell.Candidates.Any(candidate => candidate.Value == value) )
                {
                    @value
                }
            </div>
        }
    </div>
}
@code {
    [Parameter]
    public int SelectedValue { get; set; }

    [Parameter]
    public EventCallback<int> SelectedValueChanged { get; set; }

    private string InputIsHighlightedClass
    {
        get
        {
            return Cell.Input.Value != 0
                && SelectedValue == Cell.Input.Value ? "highlight" : String.Empty;
        }
    }

    private string CandidateIsHighlightedClass
    {
        get
        {
            return Cell.Candidates.Any(candidate => candidate.Value == SelectedValue) ? "candidates-highlight" : String.Empty;
        }
    }

    private void OnClick()
    {
        //if( Cell.Input.Value == 0 )
        //{
        //    Cell.Input.Value = SelectedValue;
        //}
        //else if( !Cell.IsGiven && Cell.Value == SelectedValue )
        //{
        //    Cell.Value = 0;
        //}
    }

    [Parameter]
    public ICell Cell { get; set; }

    [Parameter]
    public EventCallback<ICell> CellChanged { get; set; }



    private string GivenClass { get => Cell.IsGiven ? "given " : ""; }
    
    public bool IsGray { get => Cell.Block % 2 == 1; }
    private bool HasBottomBorder { get => Cell.Row == 2 || Cell.Row == 5; }
    private bool HasTopBorder { get => Cell.Row == 3 || Cell.Row == 6; }
    private bool HasRightBorder { get => Cell.Col == 2 || Cell.Col == 5; }
    private bool HasLeftBorder { get => Cell.Col == 3 || Cell.Col == 6;  }
    
    private string BackgroundClass
    {
        get => IsGray ? "grayBackground" : "whiteBackground";
    }

    private string Border
    {
        get
        {
            IEnumerable<(string, bool)> borders = new[]
            {
                ("top", HasTopBorder),
                ("right", HasRightBorder),
                ("bottom", HasBottomBorder),
                ("left", HasLeftBorder),
            };

            var borderToString = borders.Select(item => $"border-{item.Item1}-width: {(item.Item2 ? "medium" : "thin")};");
            return String.Join(" ", borderToString);
        }
    }
}
