@using Weboku.UserInterface.Providers
@using Weboku.UserInterface.Converters
@using Weboku.Application
@using Weboku.Application.Enums
@using Weboku.Core.Data
@inject DomainFacade DomainFacade
@inject CandidateColorProvider CandidateColorProvider

<div class="mark__candidate @_currentClass"
        style="grid-column: @_gridColumn; grid-row: @_gridRow;">
    @if (_isVisible)
    {
        @_text
    }
</div>


@code {
    [Parameter]
    public Position Pos { get; set; }
    [Parameter]
    public Value Value { get; set; }

    private int _gridColumn;
    private int _gridRow;

    private string _text;
    private bool _isVisible => DomainFacade.HasCandidate(Pos, Value);
    private bool _wasVisible;

    protected override void OnInitialized()
    {
        var z = Value - 1;
        _gridColumn = z % 3 + 1;
        _gridRow = z / 3 + 1;

        _text = Value.ToString();
        DomainFacade.OnGridChanged += StateHasChanged;
        CandidateColorProvider.OnChanged += StateHasChanged;
    }

    protected override bool ShouldRender()
    {
        return _wasVisible != _isVisible
            || _previousColor != _currentColor;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        _wasVisible = _isVisible;
        _previousColor = _currentColor;
    }

    private string _currentClass => CellColorConverter.ToCssClass(_currentColor);

    private Color _previousColor;
    private Color _currentColor => CandidateColorProvider.GetColor(Pos, Value);
}