@using Weboku.Application
@using Weboku.Core.Data
@inject DomainFacade DomainFacade


@foreach( var value in Value.NonEmpty )
{
    var z = value - 1;
    var gridColumn = z % 3 + 1;
    var gridRow = z / 3 + 1;
    var isVisible = DomainFacade.HasCandidate(Position, value);
    var candidateColor = DomainFacade.GetCandidateColor(Position, value);

    <div class="mark__candidate @candidateColor"
         style="grid-column: @gridColumn; grid-row: @gridRow;">
        @if( isVisible )
        {
            @value.ToString()
        }
    </div>

}

@code {
    [Parameter]
    public Position Position { get; set; }

    private Candidates _previousCandidates = Candidates.None;
    private bool _colorChanged = false;

    protected override bool ShouldRender()
    {
        var currentCandidates = DomainFacade.GetCandidates(Position);
        if (_previousCandidates == currentCandidates && !_colorChanged) return false;

        _previousCandidates = currentCandidates;
        _colorChanged = false;
        return true;
    }

    protected override void OnInitialized()
    {
        DomainFacade.OnGridChanged += StateHasChanged;
        DomainFacade.OnCandidateColorChanged += () =>
        {
            _colorChanged = true;
            StateHasChanged();
        };
    }

}